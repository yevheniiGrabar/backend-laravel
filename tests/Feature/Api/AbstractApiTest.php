<?php

namespace Tests\Feature\Api;

use App\Enums\Users\RolesEnum;
use App\Models\Company;
use App\Models\Lesson;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Symfony\Component\HttpFoundation\Request;
use Tests\Feature\Api\Traits\AuthAsUser;
use Tests\TestCase;

abstract class AbstractApiTest extends TestCase
{
    use RefreshDatabase;
    use AuthAsUser;
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=RolesAndPermissionsSeeder');
    }

    abstract public function getModel(): string;

    abstract public function getResource(): string;

    abstract public function getResourcePath(): string;

    abstract public function getUpdateData(): array;

    public function createModels(int $count)
    {
        return $this->getModel()::factory($count)->create();
    }

    public function getDtoKeys(): array
    {
        $model = $this->getModel();
        $resource = $this->getResource();

        return array_keys($resource::make(new $model())->toArray(new Request()));
    }

    public function testGetAll()
    {
        $this->createModels(1);

        $this->json('get', $this->getResourcePath())
            ->assertUnauthorized();

        $this->authAsUser([$this->getResourcePath()], [RolesEnum::MODERATOR]);

        $content = $this->json('get', $this->getResourcePath());

        $content->assertStatus(Response::HTTP_OK);

        //can be valid response without data for example: not same company
//        $this->assertTrue(count(json_decode($content->getContent())->data) > 0);
    }

    public function testGetById()
    {
        $this->createModels(1);
        $id = $this->getModel()::first()->id;

        $url = $this->getResourcePath() . '/' . $id;

        $this->json('get', $url)
            ->assertUnauthorized();

        $this->authAsUser([$url], [RolesEnum::MODERATOR]);

        $this->json('get', $url)
            ->assertStatus(Response::HTTP_OK)
            ->assertJsonStructure($this->getDtoKeys());
    }

    public function testDelete()
    {
        $this->createModels(1);

        $url = $this->getResourcePath() . '/' . $this->getModel()::first()->id;

        $this->json('delete', $url)
            ->assertUnauthorized();

        $this->authAsUser([$url], [RolesEnum::STUDENT]);

        $this->json('delete', $url)
            ->assertForbidden();

        $this->authAsUser([$url], [RolesEnum::CLIENT]);

        $count = $this->getModel()::count();

        $this->json('delete', $url);

        $this->assertSame($this->getModel()::count(), $count - 1);
    }

    protected function getCreateFields(Model $model): array
    {
        return array_intersect_key($model->toArray(), array_flip($model->getFillable()));
    }

    public function testCreate(): void
    {
        $modelClass = $this->getModel();
        $this->createModels(1);
        $url = $this->getResourcePath();

        $model = $modelClass::first();

        $createData = $this->getCreateFields($model);

        $this->json('post', $url, $createData)
            ->assertUnauthorized();

        $this->authAsUser([$url], [RolesEnum::STUDENT]);

        $this->postJson($url, $createData)
            ->assertForbidden();

        $this->authAsUser([$url], [RolesEnum::CLIENT]);
        $this->postJson($url, $createData);
        $this->assertTrue($modelClass::count() > 0);
    }

    public function testUpdate()
    {
        $modelClass = $this->getModel();
        $this->createModels(1);
        $url = $this->getResourcePath() . '/' . $modelClass::first()->id;

        $this->json('put', $url, [])
            ->assertUnauthorized();

        $this->authAsUser([$url], [RolesEnum::CLIENT]);

        foreach ($this->getUpdateData() as $key => $value) {
            $response = $this->put($url, [
                $key => $value
            ]);

            $this->assertEquals($value, json_decode($response->getContent())->$key);
        }
    }
}
