<?php

namespace Tests\Feature\Api;

use App\Enums\Users\RolesEnum;
use App\Models\File;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\Feature\Api\Traits\AuthAsUser;
use Tests\TestCase;

class FileTest extends TestCase {
    use RefreshDatabase;
    use AuthAsUser;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->artisan('db:seed --class=RolesAndPermissionsSeeder');
    }

    public function testUpload()
    {
        $url = 'api/files';

        $this->authAsUser([$url], [RolesEnum::SUPER_ADMIN]);

        $this->post($url,
            ['file' => UploadedFile::fake()->create('file.csv', 600, 'text/csv')]
        );

        $this->assertNotNull($file = File::query()->first());
        $path = str_replace('/storage', '', $file->name);

        $this->assertFileExists(Storage::path('/public/' . $path));
        @unlink(Storage::path('/public/' . $path));

        return $file;
    }

    public function testDelete()
    {
        $url = 'api/files';

        $this->authAsUser([$url], [RolesEnum::SUPER_ADMIN]);

        $this->post($url,
            ['file' => UploadedFile::fake()->create('file.csv', 600, 'text/csv')]
        );


        $file = File::first();

        $this->json('delete', $url . "/" . $file->id);

        $path = str_replace('/storage', '', $file->name);
        $this->assertFileDoesNotExist(Storage::path('/public/' . $path));
    }
}
